% Auto-generated by cameraCalibrator app on 26-Apr-2018
%-------------------------------------------------------

addpath('helpers');
% Define images to process
imageFileNames = {'C:\Research\calib_images\Capture_0003\snap_00001.png',...
    'C:\Research\calib_images\Capture_0003\snap_00145.png',...
    'C:\Research\calib_images\Capture_0003\snap_00343.png',...
    'C:\Research\calib_images\Capture_0003\snap_00373.png',...
    'C:\Research\calib_images\Capture_0003\snap_00415.png',...
    'C:\Research\calib_images\Capture_0003\snap_00427.png',...
    'C:\Research\calib_images\Capture_0003\snap_00493.png',...
    'C:\Research\calib_images\Capture_0003\snap_00553.png',...
    'C:\Research\calib_images\Capture_0003\snap_00685.png',...
    'C:\Research\calib_images\Capture_0003\snap_00703.png',...
    'C:\Research\calib_images\Capture_0003\snap_00715.png',...
    'C:\Research\calib_images\Capture_0003\snap_00727.png',...
    'C:\Research\calib_images\Capture_0003\snap_00733.png',...
    };

% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 24;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);
load Rotation_Matrix.mat
load Translation.mat
load Intrinsic_Matrix.mat
load Radial_Distortion.mat
load PP.mat
load parameter.mat
load R_range.mat % angle range -3~ 3
load T_range.mat
cali = 1;
d = 0:1:46;
d_range = size(d, 2);
r_range = size(R_range, 3);
t_range = size(T_range, 3);
point_num = size(imagePoints,1);
error_sum = zeros(d_range, 1);
R_est = zeros(3,3,d_range);
t_est = zeros(3,d_range);
error = zeros(point_num,1);
res = zeros(point_num,3);
array1 = zeros(point_num, 6);
array2 = zeros(point_num, 6);
array3 = zeros(point_num, 6);
coff = zeros(point_num, 9);
cres = zeros(point_num,1);
k1 = RadialDistortion(1);
k2 = RadialDistortion(2);
fx = Intrinsic_Matrix(1,1);
fy = Intrinsic_Matrix(2,2);
n1 = 1.0;
n2 = 1.49;
n3 = 1.0;
R = 50;
r = 46;
for i = 1:d_range
         for k = 1: point_num                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     
         uv = imagePoints(k,:,1);
         xw = worldPoints(k,:,1);
        [r_out, dis] = ray_in_out_pixel(uv,d(i),cali);
        res(k,:) = [-r_out(3)*dis(2)+r_out(2)*dis(3) r_out(3)*dis(1)-r_out(1)*dis(3) -r_out(2)*dis(1)+r_out(1)*dis(2)];
        cres(k, 1) = res(k,1) + res(k,2)+ res(k,3);
        % r21 r22 r31 r32 t2 t3
        array1(k,:) = [-r_out(3)*xw(1) -r_out(3)*xw(2) r_out(2)*xw(1) r_out(2)*xw(2) -r_out(3) r_out(2)];
        array2(k,:) = [r_out(3)*xw(1) r_out(3)*xw(2) -r_out(1)*xw(1) -r_out(1)*xw(2) r_out(3) -r_out(1)];
        array3(k,:) = [-r_out(2)*xw(1) -r_out(2)*xw(2) r_out(1)*xw(1) r_out(1)*xw(2) -r_out(2) r_out(1)];
        % r11 r21 r31 r12 r22 r32 t1 t2 t3
        coff(k,:) = [array2(k,1)+array3(k,1) array1(k,1)+array3(k,3) array1(k,3)+array2(k,3) ...
                     array2(k,2)+array3(k,2) array1(k,2)+array3(k,4) array1(k,4)+array2(k,4) ...
                     array2(k,5)+array3(k,5) array1(k,5)+array3(k,6) array1(k,6)+array2(k,6)];
%        r_out = Rotation_Matrix(:,:,1)'*r_out';
%        dis = Rotation_Matrix(:,:,1)'*(dis'- Translation(:,:,1));
%        lamda = -dis(3)/r_out(3);
%        x_w = [worldPoints(i,:),0];
%        x_c = Rotation_Matrix(:,:,1)*x_w' + Translation(:,:,1)';
%      c=fermat(x_c,n1,n2,n3,R,r,dv);
%     point_at_glass_water = [c(1) c(2) sqrt(R*R-c(2)*c(2))];
%     point_at_glass_air =[c(3) c(4) sqrt(r*r -c(4)*c(4))];
%     r_in_true = [point_at_glass_air(1) point_at_glass_air(2) point_at_glass_air(3)-dv];
%     r_in_true = r_in_true/norm(r_in_true);
%     r_out_true = [point_at_glass_water(1) - x_c(1) point_at_glass_water(2)-x_c(2) point_at_glass_water(3) - x_c(3)];
%     r_out_true=-r_out_true/norm(r_out_true);
%     t = (point_at_glass_air(3) - (fx*sx + dv))/r_in_true(3);
%     point_2d = [point_at_glass_air(1)-r_in_true(1)*t point_at_glass_air(2)-r_in_true(2)*t];
%     image_point = [point_2d(1)/sx+hcx hcy-point_2d(2)/sx];
%        x_uv = Intrinsic_Matrix'*x_c;
%        uv_1 = [x_uv(1)/x_uv(3) x_uv(2)/x_uv(3)];
%        x = (uv_1(1)-PP(1))/fx;
%        y = (uv_1(2)-PP(2))/fy;
%        r_2 = x*x + y*y;
%        r_4 = r_2*r_2;
%        uv_dis = [(uv_1(1)-PP(1))*(1+ k1*r_2 + k2*r_4)+PP(1) ...
%                  (uv_1(2)-PP(2))*(1+ k1*r_2 + k2*r_4)+PP(2)];
%    error(i,1)= norm(image_point-imagePoints(i,:,1));
 end
% g0 = linsolve(coff, cres);
g0 = [-0.9379; 0.1331;0.3203; -0.1775; -0.9775; -0.1137; 174.1848; -30.3544; 482.0912];
g = lagrange(coff, cres, g0);
R1 = [g(1) g(2) g(3)];
R2 = [g(4) g(5) g(6)];
R3 = cross(R1,R2);
R_est(:,:,i) = [R1; R2; R3]';
t_est(:,i) = [g(7); g(8); g(9)];
end


% Calibrate the camera
% [cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
%     'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
%     'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
%     'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
%     'ImageSize', [mrows, ncols]);

% View reprojection errors
% h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
% h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
% displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
% undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
